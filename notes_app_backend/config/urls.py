"""
URL configuration for config project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from rest_framework.routers import DefaultRouter    # Router that auto-creates REST-style routes for viewsets.
from notes.views import NoteViewSet
from rest_framework_simplejwt.views import (
    TokenObtainPairView,    # Handles login: exchange username/password for access + refresh tokens.
    TokenRefreshView,       # Handles refresh: exchange refresh token for a new access token.
)

# Create a DRF router and register the NoteViewSet with it.
# This automatically generates endpoints like:
# - GET    /api/notes/          → list all notes for the user
# - POST   /api/notes/          → create a new note
# - GET    /api/notes/<id>/     → retrieve a single note
# - PUT    /api/notes/<id>/     → update a note
# - PATCH  /api/notes/<id>/     → partially update a note
# - DELETE /api/notes/<id>/     → delete a note
router = DefaultRouter()
router.register(r"notes", NoteViewSet, basename="note")

urlpatterns = [
    # Django admin site (manage users, models, etc.)
    path('admin/', admin.site.urls),

    # Notes API endpoints generated by the router above
    path("api/", include(router.urls)),

    # DRF login/logout views for the browsable API (session-based auth in dev UI only)
    path("api/", include("rest_framework.urls")),

    # JWT auth endpoints
    path("api/token/", TokenObtainPairView.as_view(), name="token_obtain_pair"),
    # ^ Send username + password → get back {"access": "...", "refresh": "..."}

    path("api/token/refresh/", TokenRefreshView.as_view(), name="token_refresh"),
    # ^ Send a refresh token → get back a new access token
]
